name: CI - Build, Push and Deploy Docker Image

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]
  release:
    types: [published]


jobs:
  prepare:
    name: "Prepare code"
    runs-on: ubuntu-latest

    container:
      image: node:22-alpine

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build and set variables for push
        if: github.event_name == 'push'
        run: |
          echo "DEPLOY_ENV=re7" > version-front.env
          echo "IMAGE_TAG=${{ github.sha }}" >> version-front.env
          npm install
          npm run build
      - name: Build and set variables for pull request
        if: github.event_name == 'pull_request'
        run: |
          echo "DEPLOY_ENV=re7" > version-front.env
          echo "IMAGE_TAG=${{ github.sha }}" >> version-front.env
          npm install
          npm run build
      - name: Build and set variables for release
        if: github.event_name == 'release'
        run: |
          echo "DEPLOY_ENV=prod" > version-front.env
          echo "IMAGE_TAG=${{ github.event.release.tag_name }}" >> version-front.env
          npm install
          npm run build
      - name: Upload code as artifact
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: |
            .

  build-and-push:
    name: "Make Docker images"
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Download code artifact
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .
      - name: Set IMAGE_TAG from version.env
        id: set-image-tag
        run: |
          source version-front.env
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      - name: Login to Scaleway container Registry
        uses: docker/login-action@v2
        with:
          registry: rg.nl-ams.scw.cloud
          username: nologin
          password: ${{ secrets.SCW_SECRET_KEY }}
      - name: Build Docker image
        run: docker build -f deploy/Dockerfile -t rg.nl-ams.scw.cloud/canin-registry/canin-frontend:${{ env.IMAGE_TAG }} .
      - name: Push Docker image
        run: docker push rg.nl-ams.scw.cloud/canin-registry/canin-frontend:${{ env.IMAGE_TAG }}

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build-and-push
#    environment: prod
#    steps:
#      - name: Download code artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: code
#          path: .
#
#      - name: Set version file
#        id: version-file
#        run: |
#          source version.env
#          echo "VERSION_FILE=version_${DEPLOY_ENV}.env" >> $GITHUB_ENV
#
#      - name: Display variables
#        run: |
#          cat version.env
#          echo "${{ env.VERSION_FILE }}"
#          mv version.env ${{ env.VERSION_FILE }}
#
#      - name: Copy files to server
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.SSH_CANIN_HOST }}
#          username: ${{ secrets.SSH_CANIN_USER }}
#          key: ${{ secrets.SSH_CANIN_KEY }}
#          source: >
#            ./deploy/start_remote.sh,
#            ./deploy/docker-compose-re7.yaml,
#            ./deploy/docker-compose-prod.yaml,
#            ./${{ env.VERSION_FILE }},
#          target: /home/canin/
#          port: ${{ secrets.SSH_CANIN_PORT }}
#          overwrite: true
#
#      - name: Start docker compose
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.SSH_CANIN_HOST }}
#          username: ${{ secrets.SSH_CANIN_USER }}
#          key: ${{ secrets.SSH_CANIN_KEY }}
#          port: ${{ secrets.SSH_CANIN_PORT }}
#          script: |
#            source ${{ env.VERSION_FILE }}
#            cd deploy
#            bash start_remote.sh $DEPLOY_ENV